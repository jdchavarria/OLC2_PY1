/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,18],$V2=[1,27],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,25],$V7=[1,23],$V8=[1,22],$V9=[1,28],$Va=[1,24],$Vb=[1,29],$Vc=[1,30],$Vd=[5,8,25,29,59,62,64,67,68,69,70,71,72,74,79,81,82],$Ve=[1,37],$Vf=[1,46],$Vg=[1,49],$Vh=[1,45],$Vi=[1,47],$Vj=[1,48],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[12,27],$Vo=[2,29],$Vp=[1,58],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,71],$Vu=[1,72],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[11,12,27,30,35,36,42,43,44,45,46,47,48,49,50,51,52,53],$VK=[1,100],$VL=[1,102],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[9,29,36,54,55,56,57,58],$VQ=[1,122],$VR=[11,12,27,30,35,36,42,43,44,45,46,47,48,50,51,53],$VS=[11,12,27,35,36,41,42,43],$VT=[1,145],$VU=[11,12,27,30,35,36,44,45,46,47,48,50,51],$VV=[11,12,27,30,35,36,42,43,44,45,46,47,48,50,51],$VW=[11,12,27,30,44,45,46,47,48,50,51],$VX=[11,12,27,30],$VY=[1,161],$VZ=[11,27],$V_=[1,169],$V$=[1,170],$V01=[62,67,68],$V11=[1,208];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"instrucciones":4,"EOF":5,"CUERPO":6,"DECLARACION":7,"RCONSOLE":8,"PARIZQ":9,"EXPRE":10,"PARDER":11,"PTCOMA":12,"IF":13,"SWITCH":14,"WHILE":15,"FOR":16,"CONTINUE":17,"RETURN":18,"BREAK":19,"ASIGNACION":20,"AUMENTO":21,"FUNCTION":22,"GRAFICARTS":23,"DOWHILE":24,"RLET":25,"IDLISTA":26,"COMA":27,"IDLIST":28,"IDENTIFICADOR":29,"DOSPTS":30,"TIPO":31,"OPERADORES":32,"IDASIGNACION":33,"IDSIG":34,"MAS":35,"MENOS":36,"RSTRING":37,"RNUMBER":38,"RBOOLEAN":39,"ASIGNAR_EXPRESION":40,"IGUAL":41,"POR":42,"DIVIDIDO":43,"MAYQUE":44,"MENQUE":45,"MAYIGQUE":46,"MENIGQUE":47,"DOBLEIG":48,"NOIG":49,"AND":50,"OR":51,"MODULO":52,"POTENCIA":53,"NOT":54,"ENTERO":55,"CADENA":56,"CADENA2":57,"CADENA3":58,"RIF":59,"CONDICION":60,"LLAVIZQ":61,"LLAVDER":62,"RELSE":63,"RSWITCH":64,"CASOS":65,"CASO_EVALUAR":66,"RCASE":67,"RDEFAULT":68,"RWHILE":69,"RBREAK":70,"RCONTINUE":71,"RFOR":72,"ITERADOR":73,"RFUNCTION":74,"PARAMETROS":75,"TIPO_RETORNO":76,"RVOID":77,"PARASIG":78,"RRETURN":79,"LIASIG":80,"RTS":81,"RDO":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RCONSOLE",9:"PARIZQ",11:"PARDER",12:"PTCOMA",25:"RLET",27:"COMA",29:"IDENTIFICADOR",30:"DOSPTS",35:"MAS",36:"MENOS",37:"RSTRING",38:"RNUMBER",39:"RBOOLEAN",41:"IGUAL",42:"POR",43:"DIVIDIDO",44:"MAYQUE",45:"MENQUE",46:"MAYIGQUE",47:"MENIGQUE",48:"DOBLEIG",49:"NOIG",50:"AND",51:"OR",52:"MODULO",53:"POTENCIA",54:"NOT",55:"ENTERO",56:"CADENA",57:"CADENA2",58:"CADENA3",59:"RIF",61:"LLAVIZQ",62:"LLAVDER",63:"RELSE",64:"RSWITCH",67:"RCASE",68:"RDEFAULT",69:"RWHILE",70:"RBREAK",71:"RCONTINUE",72:"RFOR",74:"RFUNCTION",77:"RVOID",79:"RRETURN",81:"RTS",82:"RDO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[26,3],[26,1],[28,3],[28,1],[28,5],[28,3],[20,2],[33,3],[33,1],[34,3],[34,1],[34,5],[34,3],[21,4],[21,4],[31,1],[31,1],[31,1],[40,2],[32,1],[32,2],[32,2],[32,2],[32,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,3],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[13,7],[13,9],[13,11],[60,1],[14,7],[65,2],[65,1],[66,4],[66,3],[15,7],[19,2],[17,2],[16,15],[16,13],[16,12],[16,14],[73,3],[73,3],[22,9],[22,8],[22,8],[22,7],[76,2],[76,2],[76,2],[76,2],[75,1],[18,2],[18,3],[78,3],[78,1],[80,3],[80,1],[23,2],[24,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // se retorna cuando ya termino la lectura
            return $$[$0-1];

break;
case 2: case 70:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 13: case 14: case 15: case 16: case 17: case 20: case 27: case 34: case 35: case 36: case 37: case 68: case 87: case 88: case 89: case 90: case 91: case 95:
this.$=$$[$0];
break;
case 5:
this.$=instruccionesAPI.nuevoConsole($$[$0-2]);
break;
case 18: case 25: case 58:
this.$=$$[$0-1];
break;
case 19:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 21: case 28: case 96:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],$$[$0]);
break;
case 22: case 29: case 97:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0],"indefinido");
break;
case 23:
this.$=instruccionesAPI.nuevoAsignacion($$[$0-4],$$[$0-2],$$[$0]);
break;
case 24:
this.$=instruccionesAPI.nuevoAsignacion($$[$0-2],"indefinido",$$[$0]);
break;
case 26: case 94:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 30:
this.$=instruccionesAPI. nuevoAsignacionSimplificada($$[$0-4],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 31:
this.$=instruccionesAPI. nuevoAsignacionSimplificada($$[$0-2],"any",$$[$0-1],$$[$0]);
break;
case 32: case 33:
this.$=instruccionesAPI.nuevoAumento($$[$0-3],$$[$0-2]);
break;
case 38:
this.$=instruccionesAPI.nuevoOperador($$[$0]);
break;
case 39:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.SUMA);
break;
case 40:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.RESTA);
break;
case 41:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MULTIPLICACION);
break;
case 42:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIVISION);
break;
case 43:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 44:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 45:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 46:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 47:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 48:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 49:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 50:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 51:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DOBLE_IGUAL);
break;
case 52:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.NO_IGUAL);
break;
case 53:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 54:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 55:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO);
break;
case 56:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA);
break;
case 57:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGATIVO);
break;
case 59:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NOT);
break;
case 60:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO);
break;
case 61:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR);
break;
case 62: case 63: case 64:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA);
break;
case 65:
this.$=instruccionesAPI.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 66:
this.$=instruccionesAPI.nuevoIfElse($$[$0-6],$$[$0-3],$$[$0]);
break;
case 67:
this.$=instruccionesAPI.nuevoIfElse($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 69:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 71:
this.$=instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 72:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 73:
this.$=instruccionesAPI.nuevoCasoDef($$[$0]);
break;
case 74:
this.$=instruccionesAPI.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 77: case 80:
this.$=instruccionesAPI.nuevoFor($$[$0-11],$$[$0-9],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 78: case 79:
this.$=instruccionesAPI.nuevoFor($$[$0-9],"no",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 81: case 82:
this.$=instruccionesAPI.nuevoIterador($$[$0-2],$$[$0-1]);
break;
case 83:
this.$=instruccionesAPI.nuevoFuncion($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 84:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6], "vacio",$$[$0-3],$$[$0-1]);
break;
case 85:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6],$$[$0-4],"vacio",$$[$0-1]);
break;
case 86:
this.$=instruccionesAPI.nuevoFuncion($$[$0-5],"vacio","vacio",$$[$0-1]);
break;
case 98:
this.$=instruccionesAPI.nuevoGraficar($$[$0-1]);
break;
case 99:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6],$$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{1:[3]},{5:[1,32],6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),{9:[1,34]},o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),{26:35,28:36,29:$Ve},{9:[1,38]},{9:[1,39]},{9:[1,40]},{9:[1,41]},{12:[1,42]},{9:$Vf,10:44,12:[1,43],29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{12:[1,53]},{12:[1,54],27:[1,55]},o($Vn,$Vo,{32:59,30:$Vp,35:[1,56],36:[1,57],41:$Vq,42:$Vr,43:$Vs}),{29:[1,63]},{12:[1,64]},{61:[1,65]},o($Vn,[2,27]),{1:[2,1]},o($Vd,[2,2]),{9:$Vf,10:66,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{12:[1,67],27:[1,68]},o($Vn,[2,20]),o($Vn,[2,22],{32:70,30:[1,69],35:$Vt,36:$Vu,41:$Vq,42:$Vr,43:$Vs}),{9:$Vf,10:74,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:73},{9:$Vf,10:74,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:75},{9:$Vf,10:74,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,60:76},{25:[1,77],29:[1,78]},o($Vd,[2,76]),o($Vd,[2,92]),{12:[1,79],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{9:$Vf,10:94,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:95,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:96,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),o($Vd,[2,75]),o($Vd,[2,25]),{29:[1,98],34:97},{35:[1,99],41:$VK},{36:[1,101],41:$VL},{31:103,37:$VM,38:$VN,39:$VO},{9:$Vf,10:107,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VP,[2,38]),{41:[1,108]},{41:[1,109]},{9:[1,110]},o($Vd,[2,98]),{4:111,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{11:[1,112],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($Vd,[2,18]),{28:113,29:$Ve},{31:114,37:$VM,38:$VN,39:$VO},{9:$Vf,10:115,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{41:$VK},{41:$VL},{11:[1,116]},{11:[2,68],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{11:[1,117]},{11:[1,118]},{29:[1,119]},{30:[1,121],40:120,41:$VQ},o($Vd,[2,93]),{9:$Vf,10:123,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:124,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:125,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:126,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:127,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:128,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:129,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:130,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:131,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:132,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:133,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:134,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:135,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{9:$Vf,10:136,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VR,[2,57],{49:$VE,52:$VH}),{11:[1,137],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VR,[2,59],{49:$VE,52:$VH}),o($Vn,[2,26]),o($Vn,$Vo,{32:59,30:$Vp,35:$Vt,36:$Vu,41:$Vq,42:$Vr,43:$Vs}),{12:[1,138]},o($VP,[2,39]),{12:[1,139]},o($VP,[2,40]),o($Vn,[2,28],{32:140,35:$Vt,36:$Vu,41:$Vq,42:$Vr,43:$Vs}),o($VS,[2,34]),o($VS,[2,35]),o($VS,[2,36]),o($Vn,[2,31],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),o($VP,[2,41]),o($VP,[2,42]),{11:[1,142],29:$VT,75:141,78:143,80:144},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,146],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{12:[1,147]},o($Vn,[2,19]),o($Vn,[2,21],{32:148,35:$Vt,36:$Vu,41:$Vq,42:$Vr,43:$Vs}),o($Vn,[2,24],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),{61:[1,149]},{61:[1,150]},{61:[1,151]},{30:[1,152],40:153,41:$VQ},{12:[1,154]},{31:155,37:$VM,38:$VN,39:$VO},{9:$Vf,10:156,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VU,[2,43],{42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o($VU,[2,44],{42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o($VV,[2,45],{49:$VE,52:$VH,53:$VI}),o($VV,[2,46],{49:$VE,52:$VH,53:$VI}),o($VW,[2,47],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o($VW,[2,48],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o($VW,[2,49],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o($VW,[2,50],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,49:$VE,52:$VH,53:$VI}),o([11,12,27,30,48,50,51],[2,51],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,52:$VH,53:$VI}),o($VX,[2,52],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),o([11,12,27,30,50,51],[2,53],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,52:$VH,53:$VI}),o([11,12,27,30,51],[2,54],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,52:$VH,53:$VI}),o($VX,[2,55],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),o($VR,[2,56],{49:$VE,52:$VH}),o($VJ,[2,58]),o($Vd,[2,32]),o($Vd,[2,33]),{9:$Vf,10:157,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{11:[1,158]},{30:$VY,61:[1,160],76:159},{11:[2,91],27:[1,162]},o($VZ,[2,95]),o($VZ,[2,97],{30:[1,163]}),{69:[1,164]},o($Vd,[2,5]),{9:$Vf,10:165,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{4:166,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{65:167,66:168,67:$V_,68:$V$},{4:171,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{31:172,37:$VM,38:$VN,39:$VO},{12:[1,173]},{9:$Vf,10:174,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{40:175,41:$VQ},{12:[2,37],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($Vn,[2,30],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),{30:$VY,61:[1,177],76:176},{61:[1,178]},{4:179,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{37:[1,181],38:[1,182],39:[1,183],77:[1,180]},{29:$VT,80:184},{31:185,37:$VM,38:$VN,39:$VO},{9:[1,186]},o($Vn,[2,23],{35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,187],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{62:[1,188],66:189,67:$V_,68:$V$},o($V01,[2,71]),{9:$Vf,10:190,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{30:[1,191]},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,192],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{40:193,41:$VQ},{9:$Vf,10:194,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{12:[1,195],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{12:[1,196]},{61:[1,197]},{4:198,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{4:199,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,200],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{61:[2,87]},{61:[2,88]},{61:[2,89]},{61:[2,90]},o($VZ,[2,94]),o($VZ,[2,96]),{9:$Vf,10:201,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Vd,[2,65],{63:[1,202]}),o($Vd,[2,69]),o($V01,[2,70]),{30:[1,203],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{4:204,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,74]),{12:[1,205]},{12:[1,206],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{29:$V11,73:207},{9:$Vf,10:209,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{4:210,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,211],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,212],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,86]),{11:[1,213],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{13:214,59:$V3,61:[1,215]},{4:216,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($V01,[2,73],{7:4,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,33:26,34:31,6:33,8:$V0,25:$V1,29:$V2,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc}),{9:$Vf,10:217,29:$Vg,36:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{29:$V11,73:218},{11:[1,219]},{35:[1,220],36:[1,221]},{12:[1,222],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,223],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,85]),o($Vd,[2,84]),{12:[1,224]},o($Vd,[2,66]),{4:225,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($V01,[2,72],{7:4,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,33:26,34:31,6:33,8:$V0,25:$V1,29:$V2,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc}),{12:[1,226],35:$Vv,36:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{11:[1,227]},{61:[1,228]},{35:[1,229]},{36:[1,230]},{29:$V11,73:231},o($Vd,[2,83]),o($Vd,[2,99]),{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,232],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{29:$V11,73:233},{61:[1,234]},{4:235,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{11:[2,81]},{11:[2,82]},{11:[1,236]},o($Vd,[2,67]),{11:[1,237]},{4:238,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,239],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{61:[1,240]},{61:[1,241]},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,242],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,79]),{4:243,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{4:244,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,78]),{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,245],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},{6:33,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V1,29:$V2,33:26,34:31,59:$V3,62:[1,246],64:$V4,69:$V5,70:$V6,71:$V7,72:$V8,74:$V9,79:$Va,81:$Vb,82:$Vc},o($Vd,[2,80]),o($Vd,[2,77])],
defaultActions: {32:[2,1],180:[2,87],181:[2,88],182:[2,89],183:[2,90],229:[2,81],230:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION = require('./instrucciones').TiPO_OPERACION;
        const TIPO_VALOR = require('./instrucciones').TiPO_VALOR;
        const instruccionesAPI = require('./instrucciones').InstruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://se ignoran comentarios de una linea
break;
case 2://comentario multilinea
break;
case 3:return 25;
break;
case 4:return 74;
break;
case 5:return 38;
break;
case 6:return 37;
break;
case 7:return 39;
break;
case 8:return 77;
break;
case 9:return 25;
break;
case 10:return 'RTRUE';
break;
case 11:return 'RFALSE';
break;
case 12:return 79;
break;
case 13:return 70;
break;
case 14:return 59;
break;
case 15:return 63;
break;
case 16:return 8;
break;
case 17:return 64;
break;
case 18:return 67;
break;
case 19:return 68;
break;
case 20:return 72;
break;
case 21:return 69;
break;
case 22:return 71;
break;
case 23:return 81;
break;
case 24:return 82;
break;
case 25:return 30;
break;
case 26:return 12;
break;
case 27:return 27;
break;
case 28:return 61;
break;
case 29:return 62;
break;
case 30:return 9;
break;
case 31:return 11;
break;
case 32:return 'CORIZQ';
break;
case 33:return 'CORDER';
break;
case 34:return 'PUNTO';
break;
case 35:return 35;
break;
case 36:return 36;
break;
case 37:return 42;
break;
case 38:return 43;
break;
case 39:return 53;
break;
case 40:return 52;
break;
case 41:return 'O_MAS';
break;
case 42:return 'O_MENOS';
break;
case 43:return 'O_POR';
break;
case 44:return 'O_DIVIDIDO';
break;
case 45:return 'MENOS_MENOS';
break;
case 46:return 'MAS_MAS';
break;
case 47:return 50;
break;
case 48:return 51;
break;
case 49:return 47;
break;
case 50:return 46;
break;
case 51:return 48;
break;
case 52:return 49;
break;
case 53:return 45;
break;
case 54:return 44;
break;
case 55:return 41;
break;
case 56:return 54;
break;
case 57:
break;
case 58:
break;
case 59:return 56;
break;
case 60:return 57;
break;
case 61:return 58;
break;
case 62:return 'DECIMAL';
break;
case 63:return 55;
break;
case 64:return 29;
break;
case 65:/*se ignoran*/
break;
case 66:return 5;
break;
case 67: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:let\b)/,/^(?:function\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\.log\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:graficar_ts\(\))/,/^(?:do\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:--)/,/^(?:\+\+)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:[\r\t]+)/,/^(?:\n)/,/^(?:"[^\"]*")/,/^(?:'[^\"]*')/,/^(?:´[^\"]*´)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-z0-9_]*)/,/^(?:[\t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica2;
exports.Parser = gramatica2.Parser;
exports.parse = function () { return gramatica2.parse.apply(gramatica2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}