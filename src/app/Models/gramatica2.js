/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,24],$V2=[1,25],$V3=[1,34],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,32],$V8=[1,30],$V9=[1,29],$Va=[1,35],$Vb=[1,31],$Vc=[1,36],$Vd=[1,37],$Ve=[5,8,33,35,36,72,75,77,80,81,82,83,84,85,87,92,94,95],$Vf=[1,48],$Vg=[1,58],$Vh=[1,62],$Vi=[1,57],$Vj=[1,73],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,70],$Vr=[1,71],$Vs=[12,32],$Vt=[2,38],$Vu=[1,81],$Vv=[1,84],$Vw=[1,82],$Vx=[1,79],$Vy=[1,85],$Vz=[1,86],$VA=[1,96],$VB=[1,97],$VC=[1,107],$VD=[1,108],$VE=[1,109],$VF=[1,110],$VG=[1,111],$VH=[1,112],$VI=[1,113],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[11,12,32,37,43,44,49,51,52,53,54,55,56,57,58,59,60,61],$VQ=[1,130],$VR=[1,132],$VS=[1,135],$VT=[1,140],$VU=[1,141],$VV=[1,142],$VW=[9,36,44,48,62,63,64,65,66,67,70,71],$VX=[1,162],$VY=[11,12,32,37,43,44,49,51,52,53,54,55,56,57,59,60],$VZ=[32,49],$V_=[11,32],$V$=[1,189],$V01=[11,12,26,32,43,44,48,51,52],$V11=[1,194],$V21=[11,12,32,37,43,44,49,53,54,55,56,57,59,60],$V31=[11,12,32,37,49,53,54,55,56,57,59,60],$V41=[11,12,32,37,49],$V51=[1,221],$V61=[1,231],$V71=[1,232],$V81=[75,80,81],$V91=[1,279];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"instrucciones":4,"EOF":5,"CUERPO":6,"DECLARACION":7,"RCONSOLE":8,"PARIZQ":9,"EXPRE":10,"PARDER":11,"PTCOMA":12,"IF":13,"SWITCH":14,"WHILE":15,"FOR":16,"CONTINUE":17,"RETURN":18,"BREAK":19,"ASIGNACION":20,"AUMENTO":21,"FUNCTION":22,"GRAFICARTS":23,"DOWHILE":24,"ASIGNA_ARRAY":25,"IGUAL":26,"PUSH_ARRAY":27,"POP_ARRAY":28,"FOR_OF":29,"FOR_IN":30,"LLAMADA_METODO":31,"COMA":32,"RLET":33,"IDLISTA":34,"RCONST":35,"IDENTIFICADOR":36,"DOSPTS":37,"TIPO":38,"IDLIST":39,"OPERADORES":40,"IDASIGNACION":41,"IDSIG":42,"MAS":43,"MENOS":44,"RSTRING":45,"RNUMBER":46,"RBOOLEAN":47,"CORIZQ":48,"CORDER":49,"ASIGNAR_EXPRESION":50,"POR":51,"DIVIDIDO":52,"MAYQUE":53,"MENQUE":54,"MAYIGQUE":55,"MENIGQUE":56,"DOBLEIG":57,"NOIG":58,"AND":59,"OR":60,"MODULO":61,"NOT":62,"ENTERO":63,"DECIMAL":64,"CADENA":65,"CADENA2":66,"CADENA3":67,"ASIGNAR_ARRAY":68,"LONGITUD_ARRAY":69,"RTRUE":70,"RFALSE":71,"RIF":72,"CONDICION":73,"LLAVIZQ":74,"LLAVDER":75,"RELSE":76,"RSWITCH":77,"CASOS":78,"CASO_EVALUAR":79,"RCASE":80,"RDEFAULT":81,"RWHILE":82,"RBREAK":83,"RCONTINUE":84,"RFOR":85,"ITERADOR":86,"RFUNCTION":87,"PARAMETROS":88,"TIPO_RETORNO":89,"RVOID":90,"PARASIG":91,"RRETURN":92,"LIASIG":93,"RTS":94,"RDO":95,"PARAMETROS_LLAMADA":96,"LISTA_EXPRE":97,"PUNTO":98,"RLENGTH":99,"RPUSH":100,"RPOP":101,"ROF":102,"RIN":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RCONSOLE",9:"PARIZQ",11:"PARDER",12:"PTCOMA",26:"IGUAL",32:"COMA",33:"RLET",35:"RCONST",36:"IDENTIFICADOR",37:"DOSPTS",43:"MAS",44:"MENOS",45:"RSTRING",46:"RNUMBER",47:"RBOOLEAN",48:"CORIZQ",49:"CORDER",51:"POR",52:"DIVIDIDO",53:"MAYQUE",54:"MENQUE",55:"MAYIGQUE",56:"MENIGQUE",57:"DOBLEIG",58:"NOIG",59:"AND",60:"OR",61:"MODULO",62:"NOT",63:"ENTERO",64:"DECIMAL",65:"CADENA",66:"CADENA2",67:"CADENA3",70:"RTRUE",71:"RFALSE",72:"RIF",74:"LLAVIZQ",75:"LLAVDER",76:"RELSE",77:"RSWITCH",80:"RCASE",81:"RDEFAULT",82:"RWHILE",83:"RBREAK",84:"RCONTINUE",85:"RFOR",87:"RFUNCTION",90:"RVOID",92:"RRETURN",94:"RTS",95:"RDO",98:"PUNTO",99:"RLENGTH",100:"RPUSH",101:"RPOP",102:"ROF",103:"RIN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[6,2],[6,2],[6,1],[6,1],[6,2],[6,7],[7,3],[7,5],[7,7],[34,3],[34,1],[39,3],[39,1],[39,5],[39,3],[20,2],[41,3],[41,1],[42,3],[42,1],[42,5],[42,3],[21,4],[21,4],[38,1],[38,1],[38,1],[38,3],[50,2],[40,1],[40,2],[40,2],[40,2],[40,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,4],[10,2],[10,3],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[13,7],[13,9],[13,11],[73,1],[14,7],[78,2],[78,1],[79,4],[79,3],[15,7],[19,2],[17,2],[16,15],[16,13],[16,12],[16,14],[86,3],[86,3],[22,9],[22,8],[22,8],[22,7],[89,2],[89,2],[89,2],[89,2],[88,1],[18,2],[18,3],[91,3],[91,1],[93,3],[93,1],[23,2],[24,9],[31,4],[31,3],[96,3],[96,1],[68,3],[68,2],[97,3],[97,1],[25,4],[69,3],[27,6],[28,5],[29,10],[30,10]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // se retorna cuando ya termino la lectura
            return $$[$0-1];

break;
case 2: case 88:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 113: case 121: case 125:
this.$=[$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 21: case 22: case 29: case 36: case 43: case 44: case 45: case 47: case 76: case 78: case 79: case 86: case 105: case 106: case 107: case 108: case 109:
this.$=$$[$0];
break;
case 5:
this.$=instruccionesAPI.nuevoConsole($$[$0-2]);
break;
case 18:
this.$=instruccionesAPI.nuevoArray($$[$0-3],$$[$0-1]);
break;
case 19: case 20: case 23: case 25: case 34: case 68: case 122:
this.$=$$[$0-1];
break;
case 24:
this.$=instruccionesAPI.nuevoMostrarArray($$[$0-4],$$[$0-2]);
break;
case 28:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 30: case 37: case 114:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],$$[$0]);
break;
case 31: case 38: case 115:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0],"indefinido");
break;
case 32:
this.$=instruccionesAPI.nuevoAsignacion($$[$0-4],$$[$0-2],$$[$0]);
break;
case 33:
this.$=instruccionesAPI.nuevoAsignacion($$[$0-2],"indefinido",$$[$0]);
break;
case 35: case 112: case 120: case 124:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 39:
this.$=instruccionesAPI. nuevoAsignacionSimplificada($$[$0-4],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 40:
this.$=instruccionesAPI. nuevoAsignacionSimplificada($$[$0-2],"any",$$[$0-1],$$[$0]);
break;
case 41: case 42:
this.$=instruccionesAPI.nuevoAumento($$[$0-3],$$[$0-2]);
break;
case 46:
this.$=$$[$0-2];
break;
case 48:
this.$=instruccionesAPI.nuevoOperador($$[$0]);
break;
case 49:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.SUMA);
break;
case 50:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.RESTA);
break;
case 51:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MULTIPLICACION);
break;
case 52:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIVISION);
break;
case 53:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 54:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 55:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 56:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 57:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 58:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 59:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 60:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 61:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DOBLE_IGUAL);
break;
case 62:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.NO_IGUAL);
break;
case 63:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 64:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 65:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO);
break;
case 66:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-3],$$[$0],TIPO_OPERACION.POTENCIA);
break;
case 67:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGATIVO);
break;
case 69:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NOT);
break;
case 70:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO);
break;
case 71:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL);
break;
case 72:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR);
break;
case 73: case 74: case 75:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA);
break;
case 77:
this.$=instruccionesAPI.nuevoAsigValVec($$[$0]);
break;
case 80:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.TRUE);
break;
case 81:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.FALSE);
break;
case 83:
this.$=instruccionesAPI.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 84:
this.$=instruccionesAPI.nuevoIfElse($$[$0-6],$$[$0-3],$$[$0]);
break;
case 85:
this.$=instruccionesAPI.nuevoIfElse($$[$0-8],$$[$0-5],$$[$0-1]);
break;
case 87:
this.$=instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 89:
this.$=instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 90:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 91:
this.$=instruccionesAPI.nuevoCasoDef($$[$0]);
break;
case 92:
this.$=instruccionesAPI.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 93:
this.$=instruccionesAPI.nuevoBreak($$[$0-1]);
break;
case 94:
this.$=instruccionesAPI.nuevoContinue($$[$0-1]);
break;
case 95: case 98:
this.$=instruccionesAPI.nuevoFor($$[$0-11],$$[$0-9],$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 96: case 97:
this.$=instruccionesAPI.nuevoFor($$[$0-9],"no",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 99: case 100:
this.$=instruccionesAPI.nuevoIterador($$[$0-2],$$[$0-1]);
break;
case 101:
this.$=instruccionesAPI.nuevoFuncion($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 102:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6], "vacio",$$[$0-3],$$[$0-1]);
break;
case 103:
this.$=instruccionesAPI.nuevoFuncion($$[$0-6],$$[$0-4],"vacio",$$[$0-1]);
break;
case 104:
this.$=instruccionesAPI.nuevoFuncion($$[$0-5],"vacio","vacio",$$[$0-1]);
break;
case 110:
this.$=instruccionesAPI.nuevoReturn("indefinido");
break;
case 111:
this.$=instruccionesAPI.nuevoReturn($$[$0-1]);
break;
case 116:
this.$=instruccionesAPI.nuevoGraficar($$[$0-1]);
break;
case 117:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-6],$$[$0-2]);
break;
case 118:
this.$=instruccionesAPI.nuevoLlamadaFun($$[$0-3],$$[$0-1]);
break;
case 119:
this.$=instruccionesAPI.nuevoLlamadaFun($$[$0-2],"sin");
break;
case 126:
this.$=instruccionesAPI.nuevoAccVec($$[$0-3],$$[$0-1]);
break;
case 127:
this.$=instruccionesAPI.nuevoLongitud($$[$0-2]);
break;
case 128:
this.$=instruccionesAPI.nuevoPush($$[$0-5],$$[$0-1]);
break;
case 129:
this.$=instruccionesAPI.nuevoPop($$[$0-4]);
break;
case 130:
this.$=instruccionesAPI.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 131:
this.$=instruccionesAPI.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{1:[3]},{5:[1,39],6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{9:[1,41]},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),{26:[1,42]},{12:[1,43]},{12:[1,44]},o($Ve,[2,21]),o($Ve,[2,22]),{12:[1,45]},{34:46,36:$Vf,39:47},{36:[1,49]},{9:[1,50]},{9:[1,51]},{9:[1,52]},{9:[1,53]},{12:[1,54]},{9:$Vg,10:56,12:[1,55],25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{12:[1,74]},{12:[1,75],32:[1,76]},o($Vs,$Vt,{40:83,9:$Vu,26:$Vv,37:$Vw,43:[1,77],44:[1,78],48:$Vx,51:$Vy,52:$Vz,98:[1,80]}),{36:[1,87]},{12:[1,88]},{74:[1,89]},o($Vs,[2,36]),{1:[2,1]},o($Ve,[2,2]),{9:$Vg,10:90,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:91,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,23]),{12:[1,92],32:[1,93]},o($Vs,[2,29]),o($Vs,[2,31],{40:95,26:$Vv,37:[1,94],43:$VA,44:$VB,51:$Vy,52:$Vz}),{26:[1,98],37:[1,99]},{9:$Vg,10:101,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr,73:100},{9:$Vg,10:101,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr,73:102},{9:$Vg,10:101,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr,73:103},{33:[1,104],36:[1,105]},o($Ve,[2,94]),o($Ve,[2,110]),{12:[1,106],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{9:$Vg,10:120,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:121,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:122,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($VP,[2,70]),o($VP,[2,71]),o($VP,[2,72],{9:$Vu,48:$Vx,98:[1,123]}),o($VP,[2,73]),o($VP,[2,74]),o($VP,[2,75]),o($VP,[2,76]),o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,82]),{9:$Vg,10:126,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,49:[1,125],62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr,97:124},o($Ve,[2,93]),o($Ve,[2,34]),{36:[1,128],42:127},{26:$VQ,43:[1,129]},{26:$VR,44:[1,131]},{9:$Vg,10:133,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{100:[1,134],101:$VS},{9:$Vg,10:138,11:[1,137],25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr,96:136},{38:139,45:$VT,46:$VU,47:$VV},{9:$Vg,10:143,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($VW,[2,48]),{26:[1,144]},{26:[1,145]},{9:[1,146]},o($Ve,[2,116]),{4:147,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{11:[1,148],32:[1,149],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{12:[1,150],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},o($Ve,[2,25]),{36:$Vf,39:151},{38:152,45:$VT,46:$VU,47:$VV},{9:$Vg,10:153,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{26:$VQ},{26:$VR},{9:$Vg,10:154,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{38:155,45:$VT,46:$VU,47:$VV},{11:[1,156]},{11:[2,86],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{11:[1,157]},{11:[1,158]},{36:[1,159]},{26:$VX,37:[1,161],50:160},o($Ve,[2,111]),{9:$Vg,10:163,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:164,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:165,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,51:[1,166],62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:167,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:168,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:169,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:170,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:171,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:172,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:173,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:174,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:175,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:176,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($VY,[2,67],{58:$VL,61:$VO}),{11:[1,177],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},o($VY,[2,69],{58:$VL,61:$VO}),{99:[1,178],101:$VS},{32:[1,180],49:[1,179]},o($VP,[2,123]),o($VZ,[2,125],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($Vs,[2,35]),o($Vs,$Vt,{40:83,26:$Vv,37:$Vw,43:$VA,44:$VB,51:$Vy,52:$Vz}),{12:[1,181]},o($VW,[2,49]),{12:[1,182]},o($VW,[2,50]),{43:$VC,44:$VD,49:[1,183],51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{9:[1,184]},{9:[1,185]},{11:[1,186],32:[1,187]},o($VP,[2,119]),o($V_,[2,121],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($Vs,[2,37],{40:188,26:$Vv,43:$VA,44:$VB,48:$V$,51:$Vy,52:$Vz}),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,45]),o($Vs,[2,40],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($VW,[2,51]),o($VW,[2,52]),{11:[1,191],36:$V11,88:190,91:192,93:193},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,195],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{12:[1,196]},{9:$Vg,10:197,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($Ve,[2,18]),o($Vs,[2,28]),o($Vs,[2,30],{40:198,26:$Vv,43:$VA,44:$VB,48:$V$,51:$Vy,52:$Vz}),o($Vs,[2,33],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),{12:[1,199],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{26:[1,200],48:$V$},{74:[1,201]},{74:[1,202]},{74:[1,203]},{26:$VX,37:[1,204],50:205,102:[1,206],103:[1,207]},{12:[1,208]},{38:209,45:$VT,46:$VU,47:$VV},{9:$Vg,10:210,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($V21,[2,53],{51:$VE,52:$VF,58:$VL,61:$VO}),o($V21,[2,54],{51:$VE,52:$VF,58:$VL,61:$VO}),o($VY,[2,55],{58:$VL,61:$VO}),{9:$Vg,10:211,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($VY,[2,56],{58:$VL,61:$VO}),o($V31,[2,57],{43:$VC,44:$VD,51:$VE,52:$VF,58:$VL,61:$VO}),o($V31,[2,58],{43:$VC,44:$VD,51:$VE,52:$VF,58:$VL,61:$VO}),o($V31,[2,59],{43:$VC,44:$VD,51:$VE,52:$VF,58:$VL,61:$VO}),o($V31,[2,60],{43:$VC,44:$VD,51:$VE,52:$VF,58:$VL,61:$VO}),o([11,12,32,37,49,57,59,60],[2,61],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,58:$VL,61:$VO}),o($V41,[2,62],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o([11,12,32,37,49,59,60],[2,63],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,61:$VO}),o([11,12,32,37,49,60],[2,64],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VO}),o($V41,[2,65],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($VP,[2,68]),o($VP,[2,127]),o($VP,[2,122]),{9:$Vg,10:212,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($Ve,[2,41]),o($Ve,[2,42]),o([11,12,26,32,37,43,44,49,51,52,53,54,55,56,57,58,59,60,61],[2,126]),{9:$Vg,10:213,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{11:[1,214]},o($VP,[2,118]),{9:$Vg,10:215,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{9:$Vg,10:216,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{49:[1,217]},{11:[1,218]},{37:$V51,74:[1,220],89:219},{11:[2,109],32:[1,222]},o($V_,[2,113]),o($V_,[2,115],{37:[1,223]}),{82:[1,224]},o($Ve,[2,5]),{11:[1,225],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{9:$Vg,10:226,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($Ve,[2,26]),{9:$Vg,10:227,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{4:228,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{78:229,79:230,80:$V61,81:$V71},{4:233,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{38:234,45:$VT,46:$VU,47:$VV},{12:[1,235]},{36:[1,236]},{36:[1,237]},{9:$Vg,10:238,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{26:$VX,48:$V$,50:239},{12:[2,47],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},o($VY,[2,66],{58:$VL,61:$VO}),o($VZ,[2,124],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),{11:[1,240],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},o($VP,[2,129]),o($V_,[2,120],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($Vs,[2,39],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),o($V01,[2,46]),{37:$V51,74:[1,242],89:241},{74:[1,243]},{4:244,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{45:[1,246],46:[1,247],47:[1,248],90:[1,245]},{36:$V11,93:249},{38:250,45:$VT,46:$VU,47:$VV},{9:[1,251]},{12:[1,252]},o($Vs,[2,32],{43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO}),{12:[1,253],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,254],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{75:[1,255],79:256,80:$V61,81:$V71},o($V81,[2,89]),{9:$Vg,10:257,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{37:[1,258]},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,259],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{26:$VX,48:$V$,50:260},{9:$Vg,10:261,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{11:[1,262]},{11:[1,263]},{12:[1,264],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{12:[1,265]},{12:[2,128]},{74:[1,266]},{4:267,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{4:268,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,269],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{74:[2,105]},{74:[2,106]},{74:[2,107]},{74:[2,108]},o($V_,[2,112]),o($V_,[2,114],{48:$V$}),{9:$Vg,10:270,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},o($Ve,[2,24]),o($Ve,[2,27]),o($Ve,[2,83],{76:[1,271]}),o($Ve,[2,87]),o($V81,[2,88]),{37:[1,272],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{4:273,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,92]),{12:[1,274]},{12:[1,275],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{74:[1,276]},{74:[1,277]},{36:$V91,86:278},{9:$Vg,10:280,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{4:281,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,282],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,283],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,104]),{11:[1,284],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{13:285,72:$V4,74:[1,286]},{4:287,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($V81,[2,91],{7:4,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,41:33,42:38,6:40,8:$V0,33:$V1,35:$V2,36:$V3,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd}),{9:$Vg,10:288,25:69,28:72,31:66,36:$Vh,44:$Vi,48:$Vj,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:67,69:68,70:$Vq,71:$Vr},{36:$V91,86:289},{4:290,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{4:291,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{11:[1,292]},{43:[1,293],44:[1,294]},{12:[1,295],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,296],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,103]),o($Ve,[2,102]),{12:[1,297]},o($Ve,[2,84]),{4:298,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($V81,[2,90],{7:4,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,41:33,42:38,6:40,8:$V0,33:$V1,35:$V2,36:$V3,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd}),{12:[1,299],43:$VC,44:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO},{11:[1,300]},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,301],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,302],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{74:[1,303]},{43:[1,304]},{44:[1,305]},{36:$V91,86:306},o($Ve,[2,101]),o($Ve,[2,117]),{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,307],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{36:$V91,86:308},{74:[1,309]},o($Ve,[2,130]),o($Ve,[2,131]),{4:310,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{11:[2,99]},{11:[2,100]},{11:[1,311]},o($Ve,[2,85]),{11:[1,312]},{4:313,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,314],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{74:[1,315]},{74:[1,316]},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,317],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,97]),{4:318,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{4:319,6:3,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,96]),{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,320],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},{6:40,7:4,8:$V0,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,27:19,28:20,29:21,30:22,31:23,33:$V1,35:$V2,36:$V3,41:33,42:38,72:$V4,75:[1,321],77:$V5,82:$V6,83:$V7,84:$V8,85:$V9,87:$Va,92:$Vb,94:$Vc,95:$Vd},o($Ve,[2,98]),o($Ve,[2,95])],
defaultActions: {39:[2,1],240:[2,128],245:[2,105],246:[2,106],247:[2,107],248:[2,108],304:[2,99],305:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION = require('./instrucciones').TiPO_OPERACION;
        const TIPO_VALOR = require('./instrucciones').TiPO_VALOR;
        const instruccionesAPI = require('./instrucciones').InstruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://se ignoran comentarios de una linea
break;
case 2://comentario multilinea
break;
case 3:return 33;
break;
case 4:return 87;
break;
case 5:return 46;
break;
case 6:return 45;
break;
case 7:return 47;
break;
case 8:return 90;
break;
case 9:return 33;
break;
case 10:return 70;
break;
case 11:return 71;
break;
case 12:return 92;
break;
case 13:return 83;
break;
case 14:return 72;
break;
case 15:return 76;
break;
case 16:return 8;
break;
case 17:return 77;
break;
case 18:return 80;
break;
case 19:return 81;
break;
case 20:return 85;
break;
case 21:return 82;
break;
case 22:return 84;
break;
case 23:return 94;
break;
case 24:return 95;
break;
case 25:return 35;
break;
case 26:return 99;
break;
case 27:return 100;
break;
case 28:return 101;
break;
case 29:return 102;
break;
case 30:return 103;
break;
case 31:return 37;
break;
case 32:return 12;
break;
case 33:return 32;
break;
case 34:return 74;
break;
case 35:return 75;
break;
case 36:return 9;
break;
case 37:return 11;
break;
case 38:return 48;
break;
case 39:return 49;
break;
case 40:return 98;
break;
case 41:return 43;
break;
case 42:return 44;
break;
case 43:return 51;
break;
case 44:return 52;
break;
case 45:return 'POTENCIA';
break;
case 46:return 61;
break;
case 47:return 'O_MAS';
break;
case 48:return 'O_MENOS';
break;
case 49:return 'O_POR';
break;
case 50:return 'O_DIVIDIDO';
break;
case 51:return 'MENOS_MENOS';
break;
case 52:return 'MAS_MAS';
break;
case 53:return 59;
break;
case 54:return 60;
break;
case 55:return 56;
break;
case 56:return 55;
break;
case 57:return 57;
break;
case 58:return 58;
break;
case 59:return 54;
break;
case 60:return 53;
break;
case 61:return 26;
break;
case 62:return 62;
break;
case 63:
break;
case 64:
break;
case 65:return 65;
break;
case 66:return 66;
break;
case 67:return 67;
break;
case 68:return 64;
break;
case 69:return 63;
break;
case 70:return 36;
break;
case 71:/*se ignoran*/
break;
case 72:return 5;
break;
case 73: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:let\b)/,/^(?:function\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:console\.log\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:graficar_ts\(\))/,/^(?:do\b)/,/^(?:const\b)/,/^(?:length\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:--)/,/^(?:\+\+)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!)/,/^(?:[\r\t]+)/,/^(?:\n)/,/^(?:"[^\"]*")/,/^(?:'[^\"]*')/,/^(?:´[^\"]*´)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-z0-9_]*)/,/^(?:[\t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica2;
exports.Parser = gramatica2.Parser;
exports.parse = function () { return gramatica2.parse.apply(gramatica2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}